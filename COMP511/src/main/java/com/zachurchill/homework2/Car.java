/**
 * Unit Test Coverage
 * Based on the provided class Car, write a JUnit test class called CarTest that
 * fully tests each method in the Car class. Note that both line and branch
 * coverage are calculated. This means that every line must be executed by
 * your test cases and every if/else statement must be evaluated to both true
 * and false to receive full credit. Be aware of corner cases.
 *
 * Changes made to Car will be overwritten. Do not edit this file or the line
 * numbers in error messages will be wrong.
 */
package com.zachurchill.homework2;

/**
 * An abstraction of a Car
 **/
public class Car {
    private double tankCapacity;
    private double tank;
    private double odometer;
    private double efficiency;

    /**
     * constructs the car with the given gas tank capacity
     * and fuel efficiency. The odometer and the amount
     * of gas in the tank should always be set to zero for
     * a newly constructed car. The minimum efficiency is 15
     * and the minimum tank capacity is also 15.
     * @param tankCapacity the size of the gas tank in gallons
     * @param efficiency the fuel efficiency in miles per gallon
     **/
    public Car(double tankCapacity, double efficiency) {
        this.efficiency = 15;
        if (efficiency > 15) {
            this.efficiency = efficiency;
        }
        this.tankCapacity = 15;
        if (tankCapacity > 15) {
            this.tankCapacity = tankCapacity;
        }
        this.tank = 0;
        this.odometer = 0;
    }

    /**
     * Puts up to the specified amount of gas in the tank in
     * gallons. But, if the current gas in the tank plus the
     * new amount exceeds the tank capacity, then some gas will
     * be spilled on the ground.
     * @param gallons the amount of gas to add.
     **/
    public void fill(double gallons) {
        if (gallons + tank > tankCapacity) {
            tank = tankCapacity;
        } else {
            tank += gallons;
        }
    }

    /**
    * Returns the values for the car's efficiency.
    **/
    public double getEfficiency() {
        return this.efficiency;
    }

    /**
    * Returns the values for the car's tank capacity.
    **/
    public double getTankCapacity() {
        return tankCapacity;
    }

    /**
    * Queries the tank and return the volume of gas
    * available in gallons.
    * @return the volume of gas remaining in the tank
    **/
    public double getRemainingGas() {
        return tank;
    }

    /**
    * Drives the car the specified number of miles (or however
    * far it can go based on the amount of gas in the tank and
    * the fuel efficiency). Adds the appropriate number of miles
    * to the odometer and deducts the appropriate amount of gas
    * from the tank.
    * @param miles the number of miles to drive
    **/
    public void drive(double miles) {
        if (tank * efficiency < miles) {
            miles = tank * efficiency;
        }
        odometer += miles;
        tank -= miles/efficiency;
    }

    /**
    * Queries the odometer and returns the number of
    * miles the car has been driven.
    * @return the number of miles the car has been driven.
    **/
    public double getMilesDriven() {
        return odometer;
    }
}
